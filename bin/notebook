#!/bin/bash

# Navigate to the parent directory of the bin folder
cd "$(dirname "$0")"/..

# Set the environment name and the requirements file
ENV_NAME="env"
REQUIREMENTS_FILE="requirements.txt"
VARIABLES_FILE="variables.json"
NOTEBOOK_DIR="notebook"
PIPELINES_DIR="pipelines"
GRAPH_FILE="graph.png"
LOGS_DIR="logs"
JUPYTER_CONFIG_DIR="$HOME/.jupyter"

# Ensure readlink -f is available (fallback for realpath)
resolve_path() {
  if command -v realpath > /dev/null 2>&1; then
    realpath "$1"
  else
    readlink -f "$1"
  fi
}

# Create the notebook directory if it doesn't exist
if [ ! -d "$NOTEBOOK_DIR" ]; then
  echo "Creating directory '$NOTEBOOK_DIR'..."
  mkdir "$NOTEBOOK_DIR"
fi

# Create the pipelines directory inside notebook if it doesn't exist and link to the base folder
if [ ! -L "$NOTEBOOK_DIR/$PIPELINES_DIR" ]; then
  echo "Creating symbolic link for pipelines in '$NOTEBOOK_DIR'..."
  ln -s "$(resolve_path "$PIPELINES_DIR")" "$NOTEBOOK_DIR/$PIPELINES_DIR"
fi

# Create symbolic link for variables.json if it doesn't exist
if [ ! -L "$NOTEBOOK_DIR/$VARIABLES_FILE" ]; then
  echo "Creating symbolic link for variables.json in '$NOTEBOOK_DIR'..."
  ln -s "$(resolve_path "$VARIABLES_FILE")" "$NOTEBOOK_DIR/$VARIABLES_FILE"
fi

# Create symbolic link for requirements.txt if it doesn't exist
if [ ! -L "$NOTEBOOK_DIR/$REQUIREMENTS_FILE" ]; then
  echo "Creating symbolic link for requirements.txt in '$NOTEBOOK_DIR'..."
  ln -s "$(resolve_path "$REQUIREMENTS_FILE")" "$NOTEBOOK_DIR/$REQUIREMENTS_FILE"
fi

# Create symbolic link for graph.png if it doesn't exist
if [ ! -L "$NOTEBOOK_DIR/$GRAPH_FILE" ]; then
  echo "Creating symbolic link for graph.png in '$NOTEBOOK_DIR'..."
  ln -s "$(resolve_path "$GRAPH_FILE")" "$NOTEBOOK_DIR/$GRAPH_FILE"
fi

# Create the logs directory inside notebook if it doesn't exist
if [ ! -d "$NOTEBOOK_DIR/$LOGS_DIR" ]; then
  echo "Creating logs directory in '$NOTEBOOK_DIR'..."
  mkdir "$NOTEBOOK_DIR/$LOGS_DIR"
fi

# Link existing .log files from base directory to the logs directory
link_log_files() {
  for log_file in *.log; do
    if [ -f "$log_file" ]; then
      if [ ! -L "$NOTEBOOK_DIR/$LOGS_DIR/$(basename "$log_file")" ]; then
        echo "Linking log file: $log_file"
        ln -sf "$(resolve_path "$log_file")" "$NOTEBOOK_DIR/$LOGS_DIR/"
      fi
    fi
  done
}

# Link existing log files initially
link_log_files

# Start a background process to check for new .log files every 10 seconds
while true; do
  link_log_files
  sleep 10  # Check every 10 seconds
done &

# Create virtual environment if it doesn't exist
if [ ! -d "$ENV_NAME" ]; then
  echo "Creating virtual environment '$ENV_NAME'..."
  python3 -m venv "$ENV_NAME"
fi

# Activate the virtual environment
source "$ENV_NAME/bin/activate"

# Install dependencies if not already installed
if [ -f "$REQUIREMENTS_FILE" ]; then
  echo "Installing dependencies from $REQUIREMENTS_FILE..."
  pip install -r "$REQUIREMENTS_FILE"
else
  echo "No requirements.txt found, skipping installation of dependencies."
fi

# Check if variables.json exists in the base directory
if [ ! -f "$VARIABLES_FILE" ]; then
  echo "Error: $VARIABLES_FILE not found in the base directory!"
  exit 1
fi

# Extract the notebook_password from variables.json
NOTEBOOK_PASSWORD=$(jq -r '.notebook_password' "$VARIABLES_FILE")

if [ -z "$NOTEBOOK_PASSWORD" ]; then
  echo "Error: notebook_password not found in $VARIABLES_FILE!"
  exit 1
fi

# Hash the password using Jupyter's password hashing function
HASHED_PASSWORD=$(python3 -c "from jupyter_server.auth.security import passwd; print(passwd('$NOTEBOOK_PASSWORD'))")

# Create the Jupyter configuration directory if it doesn't exist
if [ ! -d "$JUPYTER_CONFIG_DIR" ]; then
  mkdir -p "$JUPYTER_CONFIG_DIR"
fi

# Update the Jupyter config to set the terminal start directory to notebook
JUPYTER_CONFIG_FILE="$JUPYTER_CONFIG_DIR/jupyter_notebook_config.py"
if [ ! -f "$JUPYTER_CONFIG_FILE" ]; then
  jupyter notebook --generate-config
fi

# Set the terminal to start in the notebook directory
echo "
# Set the terminal to start in the notebook directory
c.NotebookApp.terminado_settings = {'shell_command': ['/bin/bash'], 'cwd': '$(resolve_path "$NOTEBOOK_DIR")'}
" >> "$JUPYTER_CONFIG_FILE"

# Launch Jupyter Notebook on port 5000, locked down to the notebook directory
nohup jupyter notebook --port=5000 --no-browser --ip=0.0.0.0 --notebook-dir="$NOTEBOOK_DIR" --NotebookApp.password="$HASHED_PASSWORD" > "$NOTEBOOK_DIR/$LOGS_DIR/jupyter.log" 2>&1 &
